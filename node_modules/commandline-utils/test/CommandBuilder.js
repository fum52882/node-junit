var 
	CommandBuilder = require("../").CommandBuilder,
	should = require("should");

describe("CommandBuilder", function() {
	var commandBuilder = null;

	beforeEach(function() {
		commandBuilder = new CommandBuilder("javac");
	});

	describe("#ctor", function() {
		it("creates a new instance of CommandBuilder", function() {
			commandBuilder.should.be.an.instanceOf(CommandBuilder);
		});

		it("sets the command", function() {
			commandBuilder.build().should.equal("javac");
		});
	});

	describe("#append", function() {
		var result = null;
		beforeEach(function() {
			result = commandBuilder.append("Test.java");
		});
		it("appends a single value at the end of the command", function() {
			commandBuilder.build().should.equal("javac Test.java");
		});

		it("returns the current instance", function() {
			result.should.equal(commandBuilder);
		});
	});

	describe("#set", function() {
		describe("when called with no value", function() {
			var result = null;
			beforeEach(function() {
				result = commandBuilder.set("g");
			});
			it("only adds the parameter name preceeded with a - as a flag", function() {
				commandBuilder.build().should.equal("javac -g");
			});
			it("returns the current instance", function() {
				result.should.equal(commandBuilder);
			});
		});
		describe("when called with a string value", function() {
			var result = null;
			beforeEach(function() {
				result = commandBuilder.set("classpath", "Test.java");
			});
			it("adds the parameter name preceeded with a - followed by a space and the value", function() {
				commandBuilder.build().should.equal("javac -classpath Test.java");
			});
			it("returns the current instance", function() {
				result.should.equal(commandBuilder);
			});
		});
		describe("when called with an array", function() {
			var valueArray = ["/jars/test.jar", "jars/junit.jar"];
			var result = null;
			beforeEach(function() {
				result = commandBuilder.set("classpath", valueArray);
			});
			describe("and without a join char", function() {
				it("adds the parameter name preceeded with a - followed by a space and the array items joined with a space", function() {
					commandBuilder.build().should.equal("javac -classpath /jars/test.jar jars/junit.jar");
				});
				it("returns the CommandBuilder instance", function() {
					result.should.equal(commandBuilder);
				});
			});
			describe("and with a join char", function() {
				it("adds the parameter name preceeded with a - followed by a space and the array items joined with the join char", function() {
					commandBuilder.set("classpath", valueArray, ":");
					commandBuilder.build().should.equal("javac -classpath /jars/test.jar:jars/junit.jar");
				});
				it("returns the CommandBuilder instance", function() {
					result.should.equal(commandBuilder);
				});
			});
		});
	});

	describe("multiple append and set calls", function() {
		it("always appends unnamed parameters at the end", function() {
			commandBuilder.append("Test.java")
				.append("Test2.java")
				.set("classpath", ["jars/Junit.jar", "jars/hamcrest.jar"], ":")
				.set("sourcepath", "src/")
				.build().should.equal("javac -classpath jars/Junit.jar:jars/hamcrest.jar -sourcepath src/ Test.java Test2.java");
		});
	});

});